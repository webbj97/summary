(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{831:function(n,e,t){"use strict";t.r(e);var _=t(50),v=Object(_.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("如果序列 X_1, X_2, ..., X_n 满足下列条件，就说它是 斐波那契式 的：")]),n._v(" "),t("p",[n._v("n >= 3\n对于所有 i + 2 <= n，都有 X_i + X_{i+1} = X_{i+2}\n给定一个严格递增的正整数数组形成序列，找到 A 中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。")]),n._v(" "),t("p",[n._v("（回想一下，子序列是从原序列 A 中派生出来的，它从 A 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3, 5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）")]),n._v(" "),t("p"),n._v(" "),t("p",[n._v("示例 1：")]),n._v(" "),t("p",[n._v("输入: [1,2,3,4,5,6,7,8]\n输出: 5\n解释:\n最长的斐波那契式子序列为：[1,2,3,5,8] 。\n示例 2：")]),n._v(" "),t("p",[n._v("输入: [1,3,7,11,12,14,18]\n输出: 3\n解释:\n最长的斐波那契式子序列有：\n[1,11,12]，[3,11,14] 以及 [7,11,18] 。")]),n._v(" "),t("p",[n._v("提示：")]),n._v(" "),t("p",[n._v("3 <= A.length <= 1000\n1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9\n（对于以 Java，C，C++，以及 C# 的提交，时间限制被减少了 50%）")]),n._v(" "),t("p",[n._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])])}),[],!1,null,null,null);e.default=v.exports}}]);