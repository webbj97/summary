(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{916:function(t,e,n){"use strict";n.r(e);var r=n(50),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"【typescript入门】之什么是元组和枚举"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#【typescript入门】之什么是元组和枚举"}},[t._v("#")]),t._v(" 【Typescript入门】之什么是元组和枚举")]),t._v(" "),n("h2",{attrs:{id:"一、元组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、元组"}},[t._v("#")]),t._v(" 一、元组")]),t._v(" "),n("blockquote",[n("p",[t._v("数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。")])]),t._v(" "),n("h3",{attrs:{id:"_1-1-认识元组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-认识元组"}},[t._v("#")]),t._v(" 1.1 认识元组")]),t._v(" "),n("p",[t._v("定义一对值分别为string 和 number 的元组：")]),t._v(" "),n("p",[t._v("let tom: [string, number] = ['Tom', 25];\n当赋值或访问一个已知索引的元素时，会得到正确的类型：")]),t._v(" "),n("p",[t._v("let tom: [string, number];\ntom[0] = 'Tom';\ntom[1] = 25;")]),t._v(" "),n("p",[t._v("tom[0].slice(1);\ntom[1].toFixed(2);\n也可以只赋值其中一项：")]),t._v(" "),n("p",[t._v("let tom: [string, number];\ntom[0] = 'Tom';\n但是当直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。")]),t._v(" "),n("p",[t._v("let tom: [string, number];\ntom = ['Tom', 25];\nlet tom: [string, number];\ntom = ['Tom'];")]),t._v(" "),n("p",[t._v("// Property '1' is missing in type '[string]' but required in type '[string, number]'.\n越界的元素§\n当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型：")]),t._v(" "),n("p",[t._v("let tom: [string, number];\ntom = ['Tom', 25];\ntom.push('male');\ntom.push(true);")]),t._v(" "),n("p",[t._v("// Argument of type 'true' is not assignable to parameter of type 'string | number'.\n参考§\nBasic Types # Tuple（中文版）\n«  字符串字面量类型")])])}),[],!1,null,null,null);e.default=s.exports}}]);