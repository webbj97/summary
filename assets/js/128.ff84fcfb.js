(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{881:function(t,a,s){"use strict";s.r(a);var r=s(50),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"设计模式-六-命令模式-待完善"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式-六-命令模式-待完善"}},[t._v("#")]),t._v(" 设计模式（六）命令模式（待完善）")]),t._v(" "),s("p",[t._v("假设🈶️一个快餐店，而我是该餐厅的点餐服务员，我会接到无数的订单，而我会将订单列表交给厨师，让他按顺序做饭，这之前客人可以随时撤销订单。")]),t._v(" "),s("p",[t._v("这个订单列表 就是命令模式中的命令对象，即发布的命令都是从这个对象中来的")]),t._v(" "),s("h2",{attrs:{id:"用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),s("p",[t._v("命令模式是最简单和优雅的模式之一，命令模式中的命令指的是一个执行某些特定事情的指令")]),t._v(" "),s("p",[t._v("拿订餐来说，客人需要向厨师发送请求，但是完全不知道这些厨师的名字和联系方式，也不\n知道厨师炒菜的方式和步骤。命令模式把客人订餐的请求封装成 command 对象，也就是订餐中的\n订单对象。这个对象可以在程序中被四处传递，就像订单可以从服务员手中传到厨师的手中。这\n样一来，客人不需要知道厨师的名字，从而解开了请求调用者和请求接收者之间的耦合关系。")]),t._v(" "),s("h2",{attrs:{id:"命令模式的例子-菜单程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令模式的例子-菜单程序"}},[t._v("#")]),t._v(" 命令模式的例子——菜单程序")]),t._v(" "),s("p",[t._v("设计模式的主题总是把不变的事物和变化的事物分离开来，命令模式也不例外。按下按钮之\n后会发生一些事情是不变的，而具体会发生什么事情是可变的。通过 command 对象的帮助，将来\n我们可以轻易地改变这种关联，因此也可以在将来再次改变按钮的行为。")])])}),[],!1,null,null,null);a.default=n.exports}}]);