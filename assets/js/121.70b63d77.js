(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{875:function(t,a,s){"use strict";s.r(a);var n=s(50),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"八-参数传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八-参数传递"}},[t._v("#")]),t._v(" （八）参数传递")]),t._v(" "),s("blockquote",[s("p",[t._v("本篇文章主要讲的是JavaScript中最正常不过的现象——函数参数传递，本篇文章篇幅不长，但一定能引发属于你自己的思考！\n大家可能会发现，系列的最近几篇文章都围绕着函数来讲，毕竟作为Js中的一等公民，它无处不在；")])]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#1"}},[t._v("前言")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#2"}},[t._v("一、值传递")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#3"}},[t._v("二、引用传递")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#4"}},[t._v("三、共享传递")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#5"}},[t._v("四、总结")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#6"}},[t._v("写在最后")])])]),t._v(" "),s("h2",{attrs:{id:"1"}},[t._v("前言")]),t._v(" "),s("blockquote",[s("p",[t._v("目前，前端内功系列已经是第八篇了，也想听听大家的意见，无论是写作风格和之后几篇文章的侧重点，大家都可以提哦～")])]),t._v(" "),s("p",[t._v("在研究这个问题之前，大家可以回忆一下，Js基本的数据类型有哪些？如果分类？")]),t._v(" "),s("ul",[s("li",[t._v("原始数据类型值 primitive type，比如"),s("code",[t._v("Undefined")]),t._v(","),s("code",[t._v("Null")]),t._v(","),s("code",[t._v("Boolean")]),t._v(","),s("code",[t._v("Number")]),t._v(","),s("code",[t._v("String")]),t._v("。")]),t._v(" "),s("li",[t._v("引用类型值，也就是对象类型 Object type,``比如Object"),s("code",[t._v(",")]),t._v("Array"),s("code",[t._v(",")]),t._v("Function"),s("code",[t._v(",")]),t._v("Date`等。")])]),t._v(" "),s("p",[t._v("为什么这么分类？")]),t._v(" "),s("p",[t._v("因为声明变量时不同的内存分配：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值"),s("strong",[t._v("直接存储在变量访问的位置")]),t._v("。它可以直接存储，是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – "),s("code",[t._v("栈")]),t._v("中。这样存储便于迅速查寻变量的值。")])]),t._v(" "),s("li",[s("p",[t._v("引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。你可以想像成房间内放着你需要的物品，而你手里拿着房间的钥匙。这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，通过记录"),s("code",[t._v("钥匙")]),t._v("就可以找到对应存储的数据。是的"),s("code",[t._v("存储钥匙地址")]),t._v("的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。")])])]),t._v(" "),s("h2",{attrs:{id:"2"}},[t._v("一、值传递")]),t._v(" "),s("p",[t._v("在红宝书中，曾经提到："),s("code",[t._v("ECMAScript中所有函数的参数都是按值传递的")]),t._v("。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。")]),t._v(" "),s("p",[s("strong",[t._v("基本类型值的传递如同基本类型变量的复制一样：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//20，没有变化")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//30")]),t._v("\n")])])]),s("p",[t._v("这样的结果大家应该都理解，被传入函数的数据并没被修改，")]),t._v(" "),s("h2",{attrs:{id:"3"}},[t._v("二、引用传递")]),t._v(" "),s("p",[t._v("参数传递的另一种传递方式——"),s("code",[t._v("引用传递")]),t._v("：函数接收的不是值的拷贝，而是对象的隐式引用。（因为拷贝复杂的数据结构会在性能上产生问题），我们来看下面的代码。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" group "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj:'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("group"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { num: 20 }")]),t._v("\n")])])]),s("p",[t._v("我是这样理解的：")]),t._v(" "),s("ol",[s("li",[t._v("实际上是给了函数一把"),s("code",[t._v("钥匙A")]),t._v("，"),s("code",[t._v("钥匙A")]),t._v("上记录着哪个房间保存着函数需要的东西，函数就配了一把一摸一样的"),s("code",[t._v("钥匙B")]),t._v("；")]),t._v(" "),s("li",[t._v("之后函数用"),s("code",[t._v("钥匙B")]),t._v("打开了对应的房间，对房间的物品进行了改变，离开房间；")]),t._v(" "),s("li",[t._v("转过身来你又用"),s("code",[t._v("钥匙A")]),t._v("打开了这个房间，你意识到了函数其实改变了房间的布局；")]),t._v(" "),s("li",[t._v("而为什么是配了一把钥匙呢？显然配一把"),s("code",[t._v("钥匙")]),t._v("比建造一间一模一样的"),s("code",[t._v("房间")]),t._v("，要简单靠谱的多吧？")])]),t._v(" "),s("h4",{attrs:{id:"一句话概括本节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一句话概括本节"}},[t._v("#")]),t._v(" 一句话概括本节")]),t._v(" "),s("p",[t._v("按引用传递：函数内部对参数的任何改变都是影响该对象在函数外部的值，因为两者引用的是同一个对象，也就是说：这时候参数就相当于外部对象的一个别名。")]),t._v(" "),s("h2",{attrs:{id:"4"}},[t._v("三、共享传递（call by sharing）")]),t._v(" "),s("p",[t._v("该策略是1974年由Barbara Liskov为CLU编程语言提出的。")]),t._v(" "),s("p",[t._v("**该策略的要点是：**函数接收的是对象对于的拷贝（副本），该引用拷贝和形参以及其值相关联。")]),t._v(" "),s("p",[t._v("这里出现的引用，我们不能称之为“按引用传递”，因为函数接收的参数不是直接的对象别名，而是该引用地址的拷贝。")]),t._v(" "),s("p",[t._v("**最重要的区别就是：**函数内部给参数重新赋新值不会影响到外部的对象（和上例按引用传递的case），但是因为该参数是一个地址拷贝，所以在外面访问和里面访问的都是同一个对象（例如外部的该对象不是想按值传递一样完全的拷贝),改变该参数对象的属性值将会影响到外部的对象。")]),t._v(" "),s("p",[t._v("我们来看下面的例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),s("p",[t._v("上面的例子就是传入"),s("code",[t._v("Object类型")]),t._v("的但结果却和"),s("code",[t._v("引用传递")]),t._v("不同。")]),t._v(" "),s("p",[t._v("有很多开发人员（包括我）错误地认为：在局部作用域中修改的对象会在全局作用域中反映出来，\n就说明参数是按引用传递的。我们再看一看《你不知道的Js》中的例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"余光"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"未知"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 余光")]),t._v("\n")])])]),s("p",[s("strong",[t._v("setName()函数中添加了两行代码：")])]),t._v(" "),s("ol",[s("li",[t._v("为 "),s("code",[t._v("obj")]),t._v(" 重新定义了一个对象；")]),t._v(" "),s("li",[t._v("为该对象定义了一个带有不同值的 "),s("code",[t._v("name")]),t._v(" 属性；")]),t._v(" "),s("li",[t._v("将 "),s("code",[t._v("obj.name")]),t._v(" 属性设置为'未知'（注意此时obj和外部传入的obj有哪些联系？）")])]),t._v(" "),s("p",[s("strong",[t._v("为什么会这样？")])]),t._v(" "),s("ol",[s("li",[t._v("虽然在函数内部修改了参数的值，但原始的引用仍然保持未变。")]),t._v(" "),s("li",[t._v("这是因为，当在函数内部重写 "),s("code",[t._v("obj")]),t._v(" 时，这个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁。")])]),t._v(" "),s("h4",{attrs:{id:"一句话概括本节-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一句话概括本节-2"}},[t._v("#")]),t._v(" 一句话概括本节")]),t._v(" "),s("p",[t._v("共享传递不可能去解除引用和改变对象本身，但可以去修改该对象的属性值。")]),t._v(" "),s("h2",{attrs:{id:"5"}},[t._v("四、总结")]),t._v(" "),s("p",[t._v("我们来总结一下前面几节最核心的内容：")]),t._v(" "),s("ul",[s("li")]),t._v(" "),s("h2",{attrs:{id:"6"}},[t._v("写在最后")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200628181744114.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2piajY1Njg4Mzl6,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"5"}},[t._v("写在最后")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/TomXu/archive/2012/01/31/2330252.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解JavaScript"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("《你不知道的JavaScript》")])]),t._v(" "),s("h2",{attrs:{id:"5"}},[t._v("写在最后")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript内功系列：")])]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://blog.csdn.net/jbj6568839z/article/details/106479511",target:"_blank",rel:"noopener noreferrer"}},[t._v("this、call、apply详解，系列（一）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/jbj6568839z/article/details/106555301",target:"_blank",rel:"noopener noreferrer"}},[t._v("从原型到原型链，系列（二）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/jbj6568839z/article/details/106618708",target:"_blank",rel:"noopener noreferrer"}},[t._v("从作用域到作用域链，系列（三）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/jbj6568839z/article/details/106668345",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript中的执行上下文（四）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/jbj6568839z/article/details/106793254",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript中的变量对象（五)"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/jbj6568839z/article/details/106824296",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript之自执行函数表达式（六）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/jbj6568839z/article/details/106940646",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript中的闭包，给自己一场重生（七）"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("本文")]),t._v(" "),s("li",[t._v("下篇预告：Js中的数据类型都有哪些？")])]),t._v(" "),s("p",[s("strong",[t._v("关于我")])]),t._v(" "),s("ul",[s("li",[t._v("花名：余光")]),t._v(" "),s("li",[t._v("WX：j565017805")]),t._v(" "),s("li",[t._v("沉迷JS，水平有限，虚心学习中")])]),t._v(" "),s("p",[s("strong",[t._v("其他沉淀")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://webbj97.github.io/leetCode-Js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript版LeetCode题解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://webbj97.github.io/summary/",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端进阶笔记"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://yuguang.blog.csdn.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSDN"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("如果您看到了最后，不妨收藏、点赞、评论一下吧！！！\n持续更新，您的三连就是我最大的动力，虚心接受大佬们的批评和指点，共勉！")]),t._v(" "),s("p",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200602155947301.png",width:"60%"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);