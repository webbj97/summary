(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{860:function(n,t,o){"use strict";o.r(t);var e=o(50),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,o=n._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h1",{attrs:{id:"class"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[n._v("#")]),n._v(" class")]),n._v(" "),o("p",[n._v("简介\n类的由来\nJavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。")]),n._v(" "),o("p",[n._v("function Point(x, y) {\nthis.x = x;\nthis.y = y;\n}")]),n._v(" "),o("p",[n._v("Point.prototype.toString = function () {\nreturn '(' + this.x + ', ' + this.y + ')';\n};")]),n._v(" "),o("p",[n._v("var p = new Point(1, 2);\n上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。")]),n._v(" "),o("p",[n._v("ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。")]),n._v(" "),o("p",[n._v("基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的class改写，就是下面这样。")]),n._v(" "),o("p",[n._v("class Point {\nconstructor(x, y) {\nthis.x = x;\nthis.y = y;\n}")]),n._v(" "),o("p",[n._v("toString() {\nreturn '(' + this.x + ', ' + this.y + ')';\n}\n}\n上面代码定义了一个“类”，可以看到里面有一个constructor()方法，这就是构造方法，而this关键字则代表实例对象。这种新的 Class 写法，本质上与本章开头的 ES5 的构造函数Point是一致的。")]),n._v(" "),o("p",[n._v("Point类除了构造方法，还定义了一个toString()方法。注意，定义toString()方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法与方法之间不需要逗号分隔，加了会报错。")]),n._v(" "),o("p",[n._v("ES6 的类，完全可以看作构造函数的另一种写法。")]),n._v(" "),o("p",[n._v("class Point {\n// ...\n}")]),n._v(" "),o("p",[n._v('typeof Point // "function"\nPoint === Point.prototype.constructor // true\n上面代码表明，类的数据类型就是函数，类本身就指向构造函数。')]),n._v(" "),o("p",[n._v("使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。")]),n._v(" "),o("p",[n._v("class Bar {\ndoStuff() {\nconsole.log('stuff');\n}\n}")]),n._v(" "),o("p",[n._v('const b = new Bar();\nb.doStuff() // "stuff"\n构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。')]),n._v(" "),o("p",[n._v("class Point {\nconstructor() {\n// ...\n}")]),n._v(" "),o("p",[n._v("toString() {\n// ...\n}")]),n._v(" "),o("p",[n._v("toValue() {\n// ...\n}\n}")]),n._v(" "),o("p",[n._v("// 等同于")]),n._v(" "),o("p",[n._v("Point.prototype = {\nconstructor() {},\ntoString() {},\ntoValue() {},\n};\n上面代码中，constructor()、toString()、toValue()这三个方法，其实都是定义在Point.prototype上面。")]),n._v(" "),o("p",[n._v("因此，在类的实例上面调用方法，其实就是调用原型上的方法。")]),n._v(" "),o("p",[n._v("class B {}\nconst b = new B();")]),n._v(" "),o("p",[n._v("b.constructor === B.prototype.constructor // true\n上面代码中，b是B类的实例，它的constructor()方法就是B类原型的constructor()方法。")]),n._v(" "),o("p",[n._v("由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign()方法可以很方便地一次向类添加多个方法。")]),n._v(" "),o("p",[n._v("class Point {\nconstructor(){\n// ...\n}\n}")]),n._v(" "),o("p",[n._v("Object.assign(Point.prototype, {\ntoString(){},\ntoValue(){}\n});\nprototype对象的constructor()属性，直接指向“类”的本身，这与 ES5 的行为是一致的。")]),n._v(" "),o("p",[n._v("Point.prototype.constructor === Point // true\n另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。")]),n._v(" "),o("p",[n._v("class Point {\nconstructor(x, y) {\n// ...\n}")]),n._v(" "),o("p",[n._v("toString() {\n// ...\n}\n}")]),n._v(" "),o("p",[n._v('Object.keys(Point.prototype)\n// []\nObject.getOwnPropertyNames(Point.prototype)\n// ["constructor","toString"]\n上面代码中，toString()方法是Point类内部定义的方法，它是不可枚举的。这一点与 ES5 的行为不一致。')]),n._v(" "),o("p",[n._v("var Point = function (x, y) {\n// ...\n};")]),n._v(" "),o("p",[n._v("Point.prototype.toString = function () {\n// ...\n};")]),n._v(" "),o("p",[n._v('Object.keys(Point.prototype)\n// ["toString"]\nObject.getOwnPropertyNames(Point.prototype)\n// ["constructor","toString"]\n上面代码采用 ES5 的写法，toString()方法就是可枚举的。')]),n._v(" "),o("p",[n._v("constructor 方法\nconstructor()方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加。")]),n._v(" "),o("p",[n._v("class Point {\n}")]),n._v(" "),o("p",[n._v("// 等同于\nclass Point {\nconstructor() {}\n}\n上面代码中，定义了一个空的类Point，JavaScript 引擎会自动为它添加一个空的constructor()方法。")]),n._v(" "),o("p",[n._v("constructor()方法默认返回实例对象（即this），完全可以指定返回另外一个对象。")]),n._v(" "),o("p",[n._v("class Foo {\nconstructor() {\nreturn Object.create(null);\n}\n}")]),n._v(" "),o("p",[n._v("new Foo() instanceof Foo\n// false\n上面代码中，constructor()函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。")]),n._v(" "),o("p",[n._v("类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。")]),n._v(" "),o("p",[n._v("class Foo {\nconstructor() {\nreturn Object.create(null);\n}\n}")]),n._v(" "),o("p",[n._v("Foo()\n// TypeError: Class constructor Foo cannot be invoked without 'new'\n类的实例\n生成类的实例的写法，与 ES5 完全一样，也是使用new命令。前面说过，如果忘记加上new，像函数那样调用Class，将会报错。")]),n._v(" "),o("p",[n._v("class Point {\n// ...\n}")]),n._v(" "),o("p",[n._v("// 报错\nvar point = Point(2, 3);")]),n._v(" "),o("p",[n._v("// 正确\nvar point = new Point(2, 3);\n与 ES5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。")]),n._v(" "),o("p",[n._v("//定义类\nclass Point {")]),n._v(" "),o("p",[n._v("constructor(x, y) {\nthis.x = x;\nthis.y = y;\n}")]),n._v(" "),o("p",[n._v("toString() {\nreturn '(' + this.x + ', ' + this.y + ')';\n}")]),n._v(" "),o("p",[n._v("}")]),n._v(" "),o("p",[n._v("var point = new Point(2, 3);")]),n._v(" "),o("p",[n._v("point.toString() // (2, 3)")]),n._v(" "),o("p",[n._v("point.hasOwnProperty('x') // true\npoint.hasOwnProperty('y') // true\npoint.hasOwnProperty('toString') // false\npoint."),o("strong",[n._v("proto")]),n._v(".hasOwnProperty('toString') // true\n上面代码中，x和y都是实例对象point自身的属性（因为定义在this对象上），所以hasOwnProperty()方法返回true，而toString()是原型对象的属性（因为定义在Point类上），所以hasOwnProperty()方法返回false。这些都与 ES5 的行为保持一致。")]),n._v(" "),o("p",[n._v("与 ES5 一样，类的所有实例共享一个原型对象。")]),n._v(" "),o("p",[n._v("var p1 = new Point(2,3);\nvar p2 = new Point(3,2);")]),n._v(" "),o("p",[n._v("p1."),o("strong",[n._v("proto")]),n._v(" === p2."),o("strong",[n._v("proto")]),n._v("\n//true\n上面代码中，p1和p2都是Point的实例，它们的原型都是Point.prototype，所以__proto__属性是相等的。")]),n._v(" "),o("p",[n._v("这也意味着，可以通过实例的__proto__属性为“类”添加方法。")]),n._v(" "),o("p",[o("strong",[n._v("proto")]),n._v(" 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。生产环境中，我们可以使用 Object.getPrototypeOf 方法来获取实例对象的原型，然后再来为原型添加方法/属性。")]),n._v(" "),o("p",[n._v("var p1 = new Point(2,3);\nvar p2 = new Point(3,2);")]),n._v(" "),o("p",[n._v("p1."),o("strong",[n._v("proto")]),n._v(".printName = function () { return 'Oops' };")]),n._v(" "),o("p",[n._v('p1.printName() // "Oops"\np2.printName() // "Oops"')]),n._v(" "),o("p",[n._v('var p3 = new Point(4,2);\np3.printName() // "Oops"\n上面代码在p1的原型上添加了一个printName()方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的__proto__属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。')]),n._v(" "),o("p",[n._v("取值函数（getter）和存值函数（setter）\n与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。")]),n._v(" "),o("p",[n._v("class MyClass {\nconstructor() {\n// ...\n}\nget prop() {\nreturn 'getter';\n}\nset prop(value) {\nconsole.log('setter: '+value);\n}\n}")]),n._v(" "),o("p",[n._v("let inst = new MyClass();")]),n._v(" "),o("p",[n._v("inst.prop = 123;\n// setter: 123")]),n._v(" "),o("p",[n._v("inst.prop\n// 'getter'\n上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。")]),n._v(" "),o("p",[n._v("存值函数和取值函数是设置在属性的 Descriptor 对象上的。")]),n._v(" "),o("p",[n._v("class CustomHTMLElement {\nconstructor(element) {\nthis.element = element;\n}")]),n._v(" "),o("p",[n._v("get html() {\nreturn this.element.innerHTML;\n}")]),n._v(" "),o("p",[n._v("set html(value) {\nthis.element.innerHTML = value;\n}\n}")]),n._v(" "),o("p",[n._v('var descriptor = Object.getOwnPropertyDescriptor(\nCustomHTMLElement.prototype, "html"\n);')]),n._v(" "),o("p",[n._v('"get" in descriptor  // true\n"set" in descriptor  // true\n上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与 ES5 完全一致。')]),n._v(" "),o("p",[n._v("属性表达式\n类的属性名，可以采用表达式。")]),n._v(" "),o("p",[n._v("let methodName = 'getArea';")]),n._v(" "),o("p",[n._v("class Square {\nconstructor(length) {\n// ...\n}")]),n._v(" "),o("p",[o("a",{attrs:{href:""}},[n._v("methodName")]),n._v(" {\n// ...\n}\n}\n上面代码中，Square类的方法名getArea，是从表达式得到的。")]),n._v(" "),o("p",[n._v("Class 表达式\n与函数一样，类也可以使用表达式的形式定义。")]),n._v(" "),o("p",[n._v("const MyClass = class Me {\ngetClassName() {\nreturn Me.name;\n}\n};\n上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是Me，但是Me只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用MyClass引用。")]),n._v(" "),o("p",[n._v("let inst = new MyClass();\ninst.getClassName() // Me\nMe.name // ReferenceError: Me is not defined\n上面代码表示，Me只在 Class 内部有定义。")]),n._v(" "),o("p",[n._v("如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。")]),n._v(" "),o("p",[n._v("const MyClass = class { /* ... */ };\n采用 Class 表达式，可以写出立即执行的 Class。")]),n._v(" "),o("p",[n._v("let person = new class {\nconstructor(name) {\nthis.name = name;\n}")]),n._v(" "),o("p",[n._v("sayName() {\nconsole.log(this.name);\n}\n}('张三');")]),n._v(" "),o("p",[n._v('person.sayName(); // "张三"\n上面代码中，person是一个立即执行的类的实例。')]),n._v(" "),o("p",[n._v("注意点\n（1）严格模式")]),n._v(" "),o("p",[n._v("类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。")]),n._v(" "),o("p",[n._v("（2）不存在提升")]),n._v(" "),o("p",[n._v("类不存在变量提升（hoist），这一点与 ES5 完全不同。")]),n._v(" "),o("p",[n._v("new Foo(); // ReferenceError\nclass Foo {}\n上面代码中，Foo类使用在前，定义在后，这样会报错，因为 ES6 不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。")]),n._v(" "),o("p",[n._v("{\nlet Foo = class {};\nclass Bar extends Foo {\n}\n}\n上面的代码不会报错，因为Bar继承Foo的时候，Foo已经有定义了。但是，如果存在class的提升，上面代码就会报错，因为class会被提升到代码头部，而let命令是不提升的，所以导致Bar继承Foo的时候，Foo还没有定义。")]),n._v(" "),o("p",[n._v("（3）name 属性")]),n._v(" "),o("p",[n._v("由于本质上，ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。")]),n._v(" "),o("p",[n._v('class Point {}\nPoint.name // "Point"\nname属性总是返回紧跟在class关键字后面的类名。')]),n._v(" "),o("p",[n._v("（4）Generator 方法")]),n._v(" "),o("p",[n._v("如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。")]),n._v(" "),o("p",[n._v("class Foo {\nconstructor(...args) {\nthis.args = args;\n}")]),n._v(" "),o("ul",[o("li",[o("a",{attrs:{href:""}},[n._v("Symbol.iterator")]),n._v(" {\nfor (let arg of this.args) {\nyield arg;\n}\n}\n}")])]),n._v(" "),o("p",[n._v("for (let x of new Foo('hello', 'world')) {\nconsole.log(x);\n}\n// hello\n// world\n上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个 Generator 函数。Symbol.iterator方法返回一个Foo类的默认遍历器，for...of循环会自动调用这个遍历器。")]),n._v(" "),o("p",[n._v("（5）this 的指向")]),n._v(" "),o("p",[n._v("类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。")]),n._v(" "),o("p",[n._v("class Logger {\nprintName(name = 'there') {\nthis.print("),o("code",[n._v("Hello ${name}")]),n._v(");\n}")]),n._v(" "),o("p",[n._v("print(text) {\nconsole.log(text);\n}\n}")]),n._v(" "),o("p",[n._v("const logger = new Logger();\nconst { printName } = logger;\nprintName(); // TypeError: Cannot read property 'print' of undefined\n上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境（由于 class 内部是严格模式，所以 this 实际指向的是undefined），从而导致找不到print方法而报错。")]),n._v(" "),o("p",[n._v("一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。")]),n._v(" "),o("p",[n._v("class Logger {\nconstructor() {\nthis.printName = this.printName.bind(this);\n}")]),n._v(" "),o("p",[n._v("// ...\n}\n另一种解决方法是使用箭头函数。")]),n._v(" "),o("p",[n._v("class Obj {\nconstructor() {\nthis.getThis = () => this;\n}\n}")]),n._v(" "),o("p",[n._v("const myObj = new Obj();\nmyObj.getThis() === myObj // true\n箭头函数内部的this总是指向定义时所在的对象。上面代码中，箭头函数位于构造函数内部，它的定义生效的时候，是在构造函数执行的时候。这时，箭头函数所在的运行环境，肯定是实例对象，所以this会总是指向实例对象。")]),n._v(" "),o("p",[n._v("还有一种解决方法是使用Proxy，获取方法的时候，自动绑定this。")]),n._v(" "),o("p",[n._v("function selfish (target) {\nconst cache = new WeakMap();\nconst handler = {\nget (target, key) {\nconst value = Reflect.get(target, key);\nif (typeof value !== 'function') {\nreturn value;\n}\nif (!cache.has(value)) {\ncache.set(value, value.bind(target));\n}\nreturn cache.get(value);\n}\n};\nconst proxy = new Proxy(target, handler);\nreturn proxy;\n}")]),n._v(" "),o("p",[n._v("const logger = selfish(new Logger());\n静态方法\n类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。")]),n._v(" "),o("p",[n._v("class Foo {\nstatic classMethod() {\nreturn 'hello';\n}\n}")]),n._v(" "),o("p",[n._v("Foo.classMethod() // 'hello'")]),n._v(" "),o("p",[n._v("var foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n上面代码中，Foo类的classMethod方法前有static关键字，表明该方法是一个静态方法，可以直接在Foo类上调用（Foo.classMethod()），而不是在Foo类的实例上调用。如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。")]),n._v(" "),o("p",[n._v("注意，如果静态方法包含this关键字，这个this指的是类，而不是实例。")]),n._v(" "),o("p",[n._v("class Foo {\nstatic bar() {\nthis.baz();\n}\nstatic baz() {\nconsole.log('hello');\n}\nbaz() {\nconsole.log('world');\n}\n}")]),n._v(" "),o("p",[n._v("Foo.bar() // hello\n上面代码中，静态方法bar调用了this.baz，这里的this指的是Foo类，而不是Foo的实例，等同于调用Foo.baz。另外，从这个例子还可以看出，静态方法可以与非静态方法重名。")]),n._v(" "),o("p",[n._v("父类的静态方法，可以被子类继承。")]),n._v(" "),o("p",[n._v("class Foo {\nstatic classMethod() {\nreturn 'hello';\n}\n}")]),n._v(" "),o("p",[n._v("class Bar extends Foo {\n}")]),n._v(" "),o("p",[n._v("Bar.classMethod() // 'hello'\n上面代码中，父类Foo有一个静态方法，子类Bar可以调用这个方法。")]),n._v(" "),o("p",[n._v("静态方法也是可以从super对象上调用的。")]),n._v(" "),o("p",[n._v("class Foo {\nstatic classMethod() {\nreturn 'hello';\n}\n}")]),n._v(" "),o("p",[n._v("class Bar extends Foo {\nstatic classMethod() {\nreturn super.classMethod() + ', too';\n}\n}")]),n._v(" "),o("p",[n._v('Bar.classMethod() // "hello, too"\n实例属性的新写法\n实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层。')]),n._v(" "),o("p",[n._v("class IncreasingCounter {\nconstructor() {\nthis._count = 0;\n}\nget value() {\nconsole.log('Getting the current value!');\nreturn this._count;\n}\nincrement() {\nthis._count++;\n}\n}\n上面代码中，实例属性this._count定义在constructor()方法里面。另一种写法是，这个属性也可以定义在类的最顶层，其他都不变。")]),n._v(" "),o("p",[n._v("class IncreasingCounter {\n_count = 0;\nget value() {\nconsole.log('Getting the current value!');\nreturn this._count;\n}\nincrement() {\nthis._count++;\n}\n}\n上面代码中，实例属性_count与取值函数value()和increment()方法，处于同一个层级。这时，不需要在实例属性前面加上this。")]),n._v(" "),o("p",[n._v("这种新写法的好处是，所有实例对象自身的属性都定义在类的头部，看上去比较整齐，一眼就能看出这个类有哪些实例属性。")]),n._v(" "),o("p",[n._v("class foo {\nbar = 'hello';\nbaz = 'world';")]),n._v(" "),o("p",[n._v("constructor() {\n// ...\n}\n}\n上面的代码，一眼就能看出，foo类有两个实例属性，一目了然。另外，写起来也比较简洁。")]),n._v(" "),o("p",[n._v("静态属性\n静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。")]),n._v(" "),o("p",[n._v("class Foo {\n}")]),n._v(" "),o("p",[n._v("Foo.prop = 1;\nFoo.prop // 1\n上面的写法为Foo类定义了一个静态属性prop。")]),n._v(" "),o("p",[n._v("目前，只有这种写法可行，因为 ES6 明确规定，Class 内部只有静态方法，没有静态属性。现在有一个提案提供了类的静态属性，写法是在实例属性的前面，加上static关键字。")]),n._v(" "),o("p",[n._v("class MyClass {\nstatic myStaticProp = 42;")]),n._v(" "),o("p",[n._v("constructor() {\nconsole.log(MyClass.myStaticProp); // 42\n}\n}\n这个新写法大大方便了静态属性的表达。")]),n._v(" "),o("p",[n._v("// 老写法\nclass Foo {\n// ...\n}\nFoo.prop = 1;")]),n._v(" "),o("p",[n._v("// 新写法\nclass Foo {\nstatic prop = 1;\n}\n上面代码中，老写法的静态属性定义在类的外部。整个类生成以后，再生成静态属性。这样让人很容易忽略这个静态属性，也不符合相关代码应该放在一起的代码组织原则。另外，新写法是显式声明（declarative），而不是赋值处理，语义更好。")]),n._v(" "),o("p",[n._v("私有方法和私有属性\n现有的解决方案\n私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。这是常见需求，有利于代码的封装，但 ES6 不提供，只能通过变通方法模拟实现。")]),n._v(" "),o("p",[n._v("一种做法是在命名上加以区别。")]),n._v(" "),o("p",[n._v("class Widget {")]),n._v(" "),o("p",[n._v("// 公有方法\nfoo (baz) {\nthis._bar(baz);\n}")]),n._v(" "),o("p",[n._v("// 私有方法\n_bar(baz) {\nreturn this.snaf = baz;\n}")]),n._v(" "),o("p",[n._v("// ...\n}\n上面代码中，_bar()方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。")]),n._v(" "),o("p",[n._v("另一种方法就是索性将私有方法移出类，因为类内部的所有方法都是对外可见的。")]),n._v(" "),o("p",[n._v("class Widget {\nfoo (baz) {\nbar.call(this, baz);\n}")]),n._v(" "),o("p",[n._v("// ...\n}")]),n._v(" "),o("p",[n._v("function bar(baz) {\nreturn this.snaf = baz;\n}\n上面代码中，foo是公开方法，内部调用了bar.call(this, baz)。这使得bar()实际上成为了当前类的私有方法。")]),n._v(" "),o("p",[n._v("还有一种方法是利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。")]),n._v(" "),o("p",[n._v("const bar = Symbol('bar');\nconst snaf = Symbol('snaf');")]),n._v(" "),o("p",[n._v("export default class myClass{")]),n._v(" "),o("p",[n._v("// 公有方法\nfoo(baz) {\nthis"),o("a",{attrs:{href:"baz"}},[n._v("bar")]),n._v(";\n}")]),n._v(" "),o("p",[n._v("// 私有方法\n"),o("a",{attrs:{href:"baz"}},[n._v("bar")]),n._v(" {\nreturn this[snaf] = baz;\n}")]),n._v(" "),o("p",[n._v("// ...\n};\n上面代码中，bar和snaf都是Symbol值，一般情况下无法获取到它们，因此达到了私有方法和私有属性的效果。但是也不是绝对不行，Reflect.ownKeys()依然可以拿到它们。")]),n._v(" "),o("p",[n._v("const inst = new myClass();")]),n._v(" "),o("p",[n._v("Reflect.ownKeys(myClass.prototype)\n// [ 'constructor', 'foo', Symbol(bar) ]\n上面代码中，Symbol 值的属性名依然可以从类的外部拿到。")]),n._v(" "),o("p",[n._v("私有属性的提案\n目前，有一个提案，为class加了私有属性。方法是在属性名之前，使用#表示。")]),n._v(" "),o("p",[n._v("class IncreasingCounter {\n#count = 0;\nget value() {\nconsole.log('Getting the current value!');\nreturn this.#count;\n}\nincrement() {\nthis.#count++;\n}\n}\n上面代码中，#count就是私有属性，只能在类的内部使用（this.#count）。如果在类的外部使用，就会报错。")]),n._v(" "),o("p",[n._v("const counter = new IncreasingCounter();\ncounter.#count // 报错\ncounter.#count = 42 // 报错\n上面代码在类的外部，读取私有属性，就会报错。")]),n._v(" "),o("p",[n._v("下面是另一个例子。")]),n._v(" "),o("p",[n._v("class Point {\n#x;")]),n._v(" "),o("p",[n._v("constructor(x = 0) {\nthis.#x = +x;\n}")]),n._v(" "),o("p",[n._v("get x() {\nreturn this.#x;\n}")]),n._v(" "),o("p",[n._v("set x(value) {\nthis.#x = +value;\n}\n}\n上面代码中，#x就是私有属性，在Point类之外是读取不到这个属性的。由于井号#是属性名的一部分，使用时必须带有#一起使用，所以#x和x是两个不同的属性。")]),n._v(" "),o("p",[n._v("之所以要引入一个新的前缀#表示私有属性，而没有采用private关键字，是因为 JavaScript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。另外，Ruby 语言使用@表示私有属性，ES6 没有用这个符号而使用#，是因为@已经被留给了 Decorator。")]),n._v(" "),o("p",[n._v("这种写法不仅可以写私有属性，还可以用来写私有方法。")]),n._v(" "),o("p",[n._v("class Foo {\n#a;\n#b;\nconstructor(a, b) {\nthis.#a = a;\nthis.#b = b;\n}\n#sum() {\nreturn this.#a + this.#b;\n}\nprintSum() {\nconsole.log(this.#sum());\n}\n}\n上面代码中，#sum()就是一个私有方法。")]),n._v(" "),o("p",[n._v("另外，私有属性也可以设置 getter 和 setter 方法。")]),n._v(" "),o("p",[n._v("class Counter {\n#xValue = 0;")]),n._v(" "),o("p",[n._v("constructor() {\nsuper();\n// ...\n}")]),n._v(" "),o("p",[n._v("get #x() { return #xValue; }\nset #x(value) {\nthis.#xValue = value;\n}\n}\n上面代码中，#x是一个私有属性，它的读写都通过get #x()和set #x()来完成。")]),n._v(" "),o("p",[n._v("私有属性不限于从this引用，只要是在类的内部，实例也可以引用私有属性。")]),n._v(" "),o("p",[n._v("class Foo {\n#privateValue = 42;\nstatic getPrivateValue(foo) {\nreturn foo.#privateValue;\n}\n}")]),n._v(" "),o("p",[n._v("Foo.getPrivateValue(new Foo()); // 42\n上面代码允许从实例foo上面引用私有属性。")]),n._v(" "),o("p",[n._v("私有属性和私有方法前面，也可以加上static关键字，表示这是一个静态的私有属性或私有方法。")]),n._v(" "),o("p",[n._v("class FakeMath {\nstatic PI = 22 / 7;\nstatic #totallyRandomNumber = 4;")]),n._v(" "),o("p",[n._v("static #computeRandomNumber() {\nreturn FakeMath.#totallyRandomNumber;\n}")]),n._v(" "),o("p",[n._v("static random() {\nconsole.log('I heard you like random numbers…')\nreturn FakeMath.#computeRandomNumber();\n}\n}")]),n._v(" "),o("p",[n._v("FakeMath.PI // 3.142857142857143\nFakeMath.random()\n// I heard you like random numbers…\n// 4\nFakeMath.#totallyRandomNumber // 报错\nFakeMath.#computeRandomNumber() // 报错\n上面代码中，#totallyRandomNumber是私有属性，#computeRandomNumber()是私有方法，只能在FakeMath这个类的内部调用，外部调用就会报错。")]),n._v(" "),o("p",[n._v("in 运算符\ntry...catch结构可以用来判断是否存在某个私有属性。")]),n._v(" "),o("p",[n._v("class A {\nuse(obj) {\ntry {\nobj.#foo;\n} catch {\n// 私有属性 #foo 不存在\n}\n}\n}")]),n._v(" "),o("p",[n._v("const a = new A();\na.use(a); // 报错\n上面示例中，类A并不存在私有属性#foo，所以try...catch报错了。")]),n._v(" "),o("p",[n._v("这样的写法很麻烦，可读性很差，V8 引擎改进了in运算符，使它也可以用来判断私有属性。")]),n._v(" "),o("p",[n._v("class A {\nuse(obj) {\nif (#foo in obj) {\n// 私有属性 #foo 存在\n} else {\n// 私有属性 #foo 不存在\n}\n}\n}\n上面示例中，in运算符判断当前类A的实例，是否有私有属性#foo，如果有返回true，否则返回false。")]),n._v(" "),o("p",[n._v("in也可以跟this一起配合使用。")]),n._v(" "),o("p",[n._v("class A {\n#foo = 0;\nm() {\nconsole.log(#foo in this); // true\nconsole.log(#bar in this); // false\n}\n}\n注意，判断私有属性时，in只能用在定义该私有属性的类的内部。")]),n._v(" "),o("p",[n._v("class A {\n#foo = 0;\nstatic test(obj) {\nconsole.log(#foo in obj);\n}\n}")]),n._v(" "),o("p",[n._v("A.test(new A()) // true\nA.test({}) // false")]),n._v(" "),o("p",[n._v("class B {\n#foo = 0;\n}")]),n._v(" "),o("p",[n._v("A.test(new B()) // false\n上面示例中，类A的私有属性#foo，只能在类A内部使用in运算符判断，而且只对A的实例返回true，对于其他对象都返回false。")]),n._v(" "),o("p",[n._v("子类从父类继承的私有属性，也可以使用in运算符来判断。")]),n._v(" "),o("p",[n._v("class A {\n#foo = 0;\nstatic test(obj) {\nconsole.log(#foo in obj);\n}\n}")]),n._v(" "),o("p",[n._v("class SubA extends A {};")]),n._v(" "),o("p",[n._v("A.test(new SubA()) // true\n上面示例中，SubA从父类继承了私有属性#foo，in运算符也有效。")]),n._v(" "),o("p",[n._v("注意，in运算符对于Object.create()、Object.setPrototypeOf形成的继承，是无效的，因为这种继承不会传递私有属性。")]),n._v(" "),o("p",[n._v("class A {\n#foo = 0;\nstatic test(obj) {\nconsole.log(#foo in obj);\n}\n}\nconst a = new A();")]),n._v(" "),o("p",[n._v("const o1 = Object.create(a);\nA.test(o1) // false\nA.test(o1."),o("strong",[n._v("proto")]),n._v(") // true")]),n._v(" "),o("p",[n._v("const o2 = {};\nObject.setPrototypeOf(o2, A);\nA.test(o2) // false\nA.test(o2."),o("strong",[n._v("proto")]),n._v(") // true\n上面示例中，对于修改原型链形成的继承，子类都取不到父类的私有属性，所以in运算符无效。")]),n._v(" "),o("p",[n._v("new.target 属性\nnew是从构造函数生成实例对象的命令。ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。")]),n._v(" "),o("p",[n._v("function Person(name) {\nif (new.target !== undefined) {\nthis.name = name;\n} else {\nthrow new Error('必须使用 new 命令生成实例');\n}\n}")]),n._v(" "),o("p",[n._v("// 另一种写法\nfunction Person(name) {\nif (new.target === Person) {\nthis.name = name;\n} else {\nthrow new Error('必须使用 new 命令生成实例');\n}\n}")]),n._v(" "),o("p",[n._v("var person = new Person('张三'); // 正确\nvar notAPerson = Person.call(person, '张三');  // 报错\n上面代码确保构造函数只能通过new命令调用。")]),n._v(" "),o("p",[n._v("Class 内部调用new.target，返回当前 Class。")]),n._v(" "),o("p",[n._v("class Rectangle {\nconstructor(length, width) {\nconsole.log(new.target === Rectangle);\nthis.length = length;\nthis.width = width;\n}\n}")]),n._v(" "),o("p",[n._v("var obj = new Rectangle(3, 4); // 输出 true\n需要注意的是，子类继承父类时，new.target会返回子类。")]),n._v(" "),o("p",[n._v("class Rectangle {\nconstructor(length, width) {\nconsole.log(new.target === Rectangle);\n// ...\n}\n}")]),n._v(" "),o("p",[n._v("class Square extends Rectangle {\nconstructor(length, width) {\nsuper(length, width);\n}\n}")]),n._v(" "),o("p",[n._v("var obj = new Square(3); // 输出 false\n上面代码中，new.target会返回子类。")]),n._v(" "),o("p",[n._v("利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。")]),n._v(" "),o("p",[n._v("class Shape {\nconstructor() {\nif (new.target === Shape) {\nthrow new Error('本类不能实例化');\n}\n}\n}")]),n._v(" "),o("p",[n._v("class Rectangle extends Shape {\nconstructor(length, width) {\nsuper();\n// ...\n}\n}")]),n._v(" "),o("p",[n._v("var x = new Shape();  // 报错\nvar y = new Rectangle(3, 4);  // 正确\n上面代码中，Shape类不能被实例化，只能用于继承。")]),n._v(" "),o("p",[n._v("注意，在函数外部，使用new.target会报错。")]),n._v(" "),o("p",[n._v("留言")])])}),[],!1,null,null,null);t.default=s.exports}}]);